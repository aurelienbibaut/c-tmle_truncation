source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/C-TMLE_truncation.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/C-TMLE_truncation.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/C-TMLE_truncation.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/C-TMLE_truncation.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/C-TMLE_truncation.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/C-TMLE_truncation.R')
debugSource('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/C-TMLE_truncation.R')
best_loss
current_loss
index_best_candidate
deltas[13]
deltas_indices_used
deltas[deltas_indices_used]
best_loss
current_loss
best_loss
current_loss
debugSource('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/C-TMLE_truncation.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/C-TMLE_truncation.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/C-TMLE_truncation.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/C-TMLE_truncation.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/C-TMLE_truncation.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/C-TMLE_truncation.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/C-TMLE_truncation.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/C-TMLE_truncation.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/C-TMLE_truncation.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/C-TMLE_truncation.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/C-TMLE_truncation.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/C-TMLE_truncation.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/C-TMLE_truncation.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/C-TMLE_truncation.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/C-TMLE_truncation.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/C-TMLE_truncation.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/C-TMLE_truncation.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/C-TMLE_truncation.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/C-TMLE_truncation.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/C-TMLE_truncation.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/C-TMLE_truncation.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/C-TMLE_truncation.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/C-TMLE_truncation.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/C-TMLE_truncation.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/C-TMLE_truncation.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/C-TMLE_truncation.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/C-TMLE_truncation.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/C-TMLE_truncation.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/C-TMLE_truncation.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/C-TMLE_truncation.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/C-TMLE_truncation.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
compute_Psi_d_MC( = 4, alpha0 = 2, beta0 = -3, beta1 = -1.5, beta2 = -2, M = 1e6)
source('~/.active-rstudio-document')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/C-TMLE_truncation.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/C-TMLE_truncation.R')
Psi_d0 <- compute_Psi_d_MC(R = 4, alpha0 = 2, beta0 = -3, beta1 = -1.5, beta2 = -2, alwaysTreated0, M = 1e6)
Psi_d0
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
ns <- c(50, 100, 150, 200, 250, (3:10) * 100)
parameters_grid <- rbind(expand.grid(type = "L0_unif", positivity_parameter = c(2, 4),
alpha0 = 2, beta0 = -3, beta1 = +1.5, beta2 = 1, n = ns, orders_set_id = 1:4),
expand.grid(type = "L0_exp", positivity_parameter = c(2, 4),
alpha0 = 2, beta0 = -3, beta1 = +1.5, beta2 = 1, n = ns, orders_set_id = 1:4))
# parameters_grid <- expand.grid(type = "L0_unif", positivity_parameter = 4,
#                                alpha0 = 1, beta0 = -3, beta1 = +1.5, beta2 = 1, n = ns, orders_set_id = 1:3)
subset(parameters_grid, positivity_parameter == 4 & order_set_id == 3 & type == "L0_exp")
subset(parameters_grid, positivity_parameter == 4 & orders_set_id == 3 & type == "L0_exp")
subset(parameters_grid, positivity_parameter == 4 & orders_set_id == 3 & type == "L0_unif")
subset(parameters_grid, positivity_parameter == 4 & orders_set_id == 1 & type == "L0_unif")
subset(parameters_grid, positivity_parameter == 4 & orders_set_id == 1 & type == "L0_exp")
compute_Psi_d_MC <- function(type, positivity_parameter, alpha0, beta0, beta1, beta2, d0, M){
# Monte-Carlo estimation of the true value of mean of Yd
if(type == "L0_unif")
L0_MC <- runif(M, min= -positivity_parameter, max= positivity_parameter)
else
L0_MC <- rexp(M, rate = 1 / positivity_parameter) * (1 - 2 * rbinom(M, 1, prob = 0.5))
A0_MC <- d0(L0_MC)
g0_MC <- expit(alpha0 * L0_MC)
PL1givenA0L0_MC <- expit(beta0 + beta1 * A0_MC + beta2 * L0_MC)
mean(PL1givenA0L0_MC)
}
# Compute true value of truncation induced target parameter by numerical integration
compute_Psi_0_delta <- function(type, positivity_parameter, alpha0, beta0, beta1, beta2, d0, delta){
#g0_dw_w is g0(d(w)|w)
g0_dw_w <- Vectorize(function(w) d0(w) * expit(alpha0 * w) + (1 - d0(w)) * (1 - expit(alpha0 * w)))
# Q0_dw_w is \bar{Q}_0(d(w)| w)
Q0_dw_w <- function(w) expit(beta0 + beta1 * d0(w) + beta2 * w)
# q_w is q_w(w)
if(type == "L0_exp"){
q_w <- function(w) 1 / 2 * 1 / positivity_parameter * exp(-abs(w) / posititivity_parameter)
}else{
q_w <- Vectorize(function(w) 1 / (2 * positivity_parameter) * (abs(w) <= positivity_parameter))
}
# Define integrand such that \int integrand(w) dw = Psi_0(\delta) and integrate it
integrand <- Vectorize(function(w) q_w(w) * g0_dw_w(w) / max(delta, g0_dw_w(w)) * Q0_dw_w(w))
integrate(integrand, lower = -5 * positivity_parameter, upper = 5 * positivity_parameter)$value
}
# Compute the true variance of the influence curve of an extrapolated target parameter by
# numerical integration
true_variance_IC <- function(type, positivity_parameter, alpha0, beta0, beta1, beta2, d0,
delta0, order, n_points = 11, diff_step = NULL){
# Compute a_delta0 as defined in write-up
result_compute_a_delta0 <- compute_a_delta0(delta0, order = order, n_points, diff_step, verbose=F)
a_delta0 <- result_compute_a_delta0$a_delta0
deltas <- result_compute_a_delta0$deltas
# Compute the truncation induced target parameters at truncation levels deltas
Psi_0_deltas <- sapply(deltas, Vectorize(function(delta) compute_Psi_0_delta(type,
positivity_parameter,
alpha0, beta0, beta1,
beta2, d0,
delta)))
# Define factors of the squared IC components
#g0_dw_w is g0(d(w)|w)
g0_dw_w <- Vectorize(function(w) d0(w) * expit(alpha0 * w) + (1 - d0(w)) * (1 - expit(alpha0 * w)))
# Q0_dw_w is \bar{Q}_0(d(w)| w)
Q0_dw_w <- function(w) expit(beta0 + beta1 * d0(w) + beta2 * w)
# q_w is q_w(w)
if(type == "L0_exp"){
q_w <- function(w) 1 / 2 * 1 / positivity_parameter * exp(-abs(w) / posititivity_parameter)
}else{
q_w <- Vectorize(function(w) 1 / (2 * positivity_parameter) * (abs(w) <= positivity_parameter))
}
# a_dot_inv_g_deltas is \sum_i a_i / g0_{delta_i}(d(w), w)
a_dot_inv_g_deltas <- Vectorize(function(w)
sum(a_delta0 * 1 / max(deltas, g0_dw_w(w)) * deltas + (deltas <= g0_dw_w(w)) * g0_dw_w(w)))
# Define integrand and return its integral
integrand <- Vectorize(function(w) q_w(w) * (Q0_dw_w(w) - Q0_dw_w(w)^2) * a_dot_inv_g_deltas(w)^2 +
q_w(w) * a_dot_inv_g_deltas(w)^2 * g0_dw_w(w)^2 * Q0_dw_w(w)^2)
integrate(integrand, lower = -10 * positivity_parameter, upper = 10 * positivity_parameter)$value -
sum(a_delta0 * Psi_0_deltas)^2
}
# Compute true variance of influence curve of an extrapolated target parameter by Monte Carlo
true_variance_IC_MC <- function(type, positivity_parameter, alpha0, beta0, beta1, beta2, d0,
delta0, order, n_points = 11, diff_step = NULL, M = 1e6){
# Compute a_delta0 as defined in write-up
result_compute_a_delta0 <- compute_a_delta0(delta0, order = order, n_points, diff_step, verbose=F)
a_delta0 <- result_compute_a_delta0$a_delta0
deltas <- result_compute_a_delta0$deltas
# Compute the truncation induced target parameters at truncation levels deltas
Psi_0_deltas <- sapply(deltas, Vectorize(function(delta) compute_Psi_0_delta(type,
positivity_parameter,
alpha0, beta0, beta1,
beta2, d0,
delta)))
# Sample a large number of observations from the true data generating mechanism
if(type == "L0_unif")
L0 <- runif(M, min = -positivity_parameter, max = positivity_parameter)
else
L0 <- rexp(M, rate = 1 / positivity_parameter) * (1 - 2 * rbinom(M, 1, prob = 0.5))
g0 <- expit(alpha0 * L0)
A0 <- rbinom(n, 1, prob = expit(g0))
g0_dw_w <- d0(L0) * g0 + (1 - d0(L0)) * (1 - g0)
Q_bar_dw_w <- expit(beta0 + beta1 * d0(L0) + beta2 * L0)
Q_bar <- expit(beta0 + beta1 * A0 + beta2 * L0)
L1 <- rbinom(n, 1, prob = Q_bar)
# Define truncated gs
g0_dw_w_deltas <- sapply(deltas, function(delta) (g0_dw_w > delta) * g0_dw_w + (g0_dw_w <= delta) * delta)
a_dot_inv_g0_deltas <- (1 / g0_dw_w_deltas) %*% t(a_delta0)
var_semi_plug_in <-  mean((Q_bar_dw_w - Q_bar_dw_w^2) * g0_dw_w * a_dot_inv_g0_deltas^2 +
a_dot_inv_g0_deltas^2 * Q_bar_dw_w^2 * g0_dw_w^2) - sum(a_delta0 * Psi_0_deltas)^2
IC_plus_constant <- (A0 == d0(L0)) * a_dot_inv_g0_deltas * (L1 - Q_bar) +
a_dot_inv_g0_deltas * g0_dw_w * Q_bar_dw_w
var_MC <- var(IC_plus_constant)
list(var_MC = var_MC, var_semi_plug_in = var_semi_plug_in)
}
debug(true_variance_IC)
subset(parameters_grid, positivity_parameter == 4 & orders_set_id == 1 & type == "L0_exp")
job <- 130
order <- 0
delta0s <- c(1e-4, 5e-4, 1e-3, 5e-3, 1e-2, 5e-2, 1e-1, 2e-1)
i <- 1
true_variance_IC(type = parameters_grid[job, "type"],
positivity_parameter = parameters_grid[job, "positivity_parameter"],
alpha0 = parameters_grid[job, "alpha0"],
beta0 = parameters_grid[job, "beta0"],
beta1 = parameters_grid[job, "beta1"],
beta2 = parameters_grid[job, "beta2"],
d0 = alwaysTreated0,
delta0 = delta0s[i],
order = order)
compute_a_delta0 <- function(delta0, order, n_points = 9, diff_step = NULL, verbose = F){
#   cat("delta0 = ", delta0, " and order = ", order, "\n")
if(order <= 0) return(list(a_delta0 = 1, deltas = delta0))
if(n_points %% 2 == 0) n_points <- n_points + 1
if(is.null(diff_step)){
if(delta0 - (n_points-1)/2*1e-3 > 0){ diff_step=1e-3 }else{ diff_step = delta0/(n_points-1) }
}
bw <- diff_step * 2
deltas <- delta0 + (1:n_points-1-(n_points-1) / 2)*diff_step
weights <- exp(-(deltas-delta0)^2 / (2*bw^2)) / sqrt(2*pi*bw^2)
X <- outer(deltas - delta0, 0:order, "^")
A <- apply(diag(nrow(X)), 2, function(C) lm.wfit(X, C, weights)$coefficients)
a_delta0 <- (-delta0)^(0:order) %*% A
list(a_delta0 = a_delta0, differentiator = A, deltas = deltas)
}
true_variance_IC(type = parameters_grid[job, "type"],
positivity_parameter = parameters_grid[job, "positivity_parameter"],
alpha0 = parameters_grid[job, "alpha0"],
beta0 = parameters_grid[job, "beta0"],
beta1 = parameters_grid[job, "beta1"],
beta2 = parameters_grid[job, "beta2"],
d0 = alwaysTreated0,
delta0 = delta0s[i],
order = order)
order
delta0
positivity_parameter
a_delta0
deltas
compute_Psi_0_delta <- function(type, positivity_parameter, alpha0, beta0, beta1, beta2, d0, delta){
#g0_dw_w is g0(d(w)|w)
g0_dw_w <- Vectorize(function(w) d0(w) * expit(alpha0 * w) + (1 - d0(w)) * (1 - expit(alpha0 * w)))
# Q0_dw_w is \bar{Q}_0(d(w)| w)
Q0_dw_w <- function(w) expit(beta0 + beta1 * d0(w) + beta2 * w)
# q_w is q_w(w)
if(type == "L0_exp"){
q_w <- function(w) 1 / 2 * 1 / positivity_parameter * exp(-abs(w) / positivity_parameter)
}else{
q_w <- Vectorize(function(w) 1 / (2 * positivity_parameter) * (abs(w) <= positivity_parameter))
}
# Define integrand such that \int integrand(w) dw = Psi_0(\delta) and integrate it
integrand <- Vectorize(function(w) q_w(w) * g0_dw_w(w) / max(delta, g0_dw_w(w)) * Q0_dw_w(w))
integrate(integrand, lower = -5 * positivity_parameter, upper = 5 * positivity_parameter)$value
}
compute_Psi_d_MC <- function(type, positivity_parameter, alpha0, beta0, beta1, beta2, d0, M){
# Monte-Carlo estimation of the true value of mean of Yd
if(type == "L0_unif")
L0_MC <- runif(M, min= -positivity_parameter, max= positivity_parameter)
else
L0_MC <- rexp(M, rate = 1 / positivity_parameter) * (1 - 2 * rbinom(M, 1, prob = 0.5))
A0_MC <- d0(L0_MC)
g0_MC <- expit(alpha0 * L0_MC)
PL1givenA0L0_MC <- expit(beta0 + beta1 * A0_MC + beta2 * L0_MC)
mean(PL1givenA0L0_MC)
}
# Compute true value of truncation induced target parameter by numerical integration
compute_Psi_0_delta <- function(type, positivity_parameter, alpha0, beta0, beta1, beta2, d0, delta){
#g0_dw_w is g0(d(w)|w)
g0_dw_w <- Vectorize(function(w) d0(w) * expit(alpha0 * w) + (1 - d0(w)) * (1 - expit(alpha0 * w)))
# Q0_dw_w is \bar{Q}_0(d(w)| w)
Q0_dw_w <- function(w) expit(beta0 + beta1 * d0(w) + beta2 * w)
# q_w is q_w(w)
if(type == "L0_exp"){
q_w <- function(w) 1 / 2 * 1 / positivity_parameter * exp(-abs(w) / positivity_parameter)
}else{
q_w <- Vectorize(function(w) 1 / (2 * positivity_parameter) * (abs(w) <= positivity_parameter))
}
# Define integrand such that \int integrand(w) dw = Psi_0(\delta) and integrate it
integrand <- Vectorize(function(w) q_w(w) * g0_dw_w(w) / max(delta, g0_dw_w(w)) * Q0_dw_w(w))
integrate(integrand, lower = -5 * positivity_parameter, upper = 5 * positivity_parameter)$value
}
# Compute the true variance of the influence curve of an extrapolated target parameter by
# numerical integration
true_variance_IC <- function(type, positivity_parameter, alpha0, beta0, beta1, beta2, d0,
delta0, order, n_points = 11, diff_step = NULL){
# Compute a_delta0 as defined in write-up
result_compute_a_delta0 <- compute_a_delta0(delta0, order = order, n_points, diff_step, verbose=F)
a_delta0 <- result_compute_a_delta0$a_delta0
deltas <- result_compute_a_delta0$deltas
# Compute the truncation induced target parameters at truncation levels deltas
Psi_0_deltas <- sapply(deltas, Vectorize(function(delta) compute_Psi_0_delta(type,
positivity_parameter,
alpha0, beta0, beta1,
beta2, d0,
delta)))
# Define factors of the squared IC components
#g0_dw_w is g0(d(w)|w)
g0_dw_w <- Vectorize(function(w) d0(w) * expit(alpha0 * w) + (1 - d0(w)) * (1 - expit(alpha0 * w)))
# Q0_dw_w is \bar{Q}_0(d(w)| w)
Q0_dw_w <- function(w) expit(beta0 + beta1 * d0(w) + beta2 * w)
# q_w is q_w(w)
if(type == "L0_exp"){
q_w <- function(w) 1 / 2 * 1 / positivity_parameter * exp(-abs(w) / positivity_parameter)
}else{
q_w <- Vectorize(function(w) 1 / (2 * positivity_parameter) * (abs(w) <= positivity_parameter))
}
# a_dot_inv_g_deltas is \sum_i a_i / g0_{delta_i}(d(w), w)
a_dot_inv_g_deltas <- Vectorize(function(w)
sum(a_delta0 * 1 / max(deltas, g0_dw_w(w)) * deltas + (deltas <= g0_dw_w(w)) * g0_dw_w(w)))
# Define integrand and return its integral
integrand <- Vectorize(function(w) q_w(w) * (Q0_dw_w(w) - Q0_dw_w(w)^2) * a_dot_inv_g_deltas(w)^2 +
q_w(w) * a_dot_inv_g_deltas(w)^2 * g0_dw_w(w)^2 * Q0_dw_w(w)^2)
integrate(integrand, lower = -10 * positivity_parameter, upper = 10 * positivity_parameter)$value -
sum(a_delta0 * Psi_0_deltas)^2
}
# Compute true variance of influence curve of an extrapolated target parameter by Monte Carlo
true_variance_IC_MC <- function(type, positivity_parameter, alpha0, beta0, beta1, beta2, d0,
delta0, order, n_points = 11, diff_step = NULL, M = 1e6){
# Compute a_delta0 as defined in write-up
result_compute_a_delta0 <- compute_a_delta0(delta0, order = order, n_points, diff_step, verbose=F)
a_delta0 <- result_compute_a_delta0$a_delta0
deltas <- result_compute_a_delta0$deltas
# Compute the truncation induced target parameters at truncation levels deltas
Psi_0_deltas <- sapply(deltas, Vectorize(function(delta) compute_Psi_0_delta(type,
positivity_parameter,
alpha0, beta0, beta1,
beta2, d0,
delta)))
# Sample a large number of observations from the true data generating mechanism
if(type == "L0_unif")
L0 <- runif(M, min = -positivity_parameter, max = positivity_parameter)
else
L0 <- rexp(M, rate = 1 / positivity_parameter) * (1 - 2 * rbinom(M, 1, prob = 0.5))
g0 <- expit(alpha0 * L0)
A0 <- rbinom(n, 1, prob = expit(g0))
g0_dw_w <- d0(L0) * g0 + (1 - d0(L0)) * (1 - g0)
Q_bar_dw_w <- expit(beta0 + beta1 * d0(L0) + beta2 * L0)
Q_bar <- expit(beta0 + beta1 * A0 + beta2 * L0)
L1 <- rbinom(n, 1, prob = Q_bar)
# Define truncated gs
g0_dw_w_deltas <- sapply(deltas, function(delta) (g0_dw_w > delta) * g0_dw_w + (g0_dw_w <= delta) * delta)
a_dot_inv_g0_deltas <- (1 / g0_dw_w_deltas) %*% t(a_delta0)
var_semi_plug_in <-  mean((Q_bar_dw_w - Q_bar_dw_w^2) * g0_dw_w * a_dot_inv_g0_deltas^2 +
a_dot_inv_g0_deltas^2 * Q_bar_dw_w^2 * g0_dw_w^2) - sum(a_delta0 * Psi_0_deltas)^2
IC_plus_constant <- (A0 == d0(L0)) * a_dot_inv_g0_deltas * (L1 - Q_bar) +
a_dot_inv_g0_deltas * g0_dw_w * Q_bar_dw_w
var_MC <- var(IC_plus_constant)
list(var_MC = var_MC, var_semi_plug_in = var_semi_plug_in)
}
ns <- c(50, 100, 150, 200, 250, (3:10) * 100)
parameters_grid <- rbind(expand.grid(type = "L0_unif", positivity_parameter = c(2, 4),
alpha0 = 2, beta0 = -3, beta1 = +1.5, beta2 = 1, n = ns, orders_set_id = 1:4),
expand.grid(type = "L0_exp", positivity_parameter = c(2, 4),
alpha0 = 2, beta0 = -3, beta1 = +1.5, beta2 = 1, n = ns, orders_set_id = 1:4))
debug(true_variance_IC)
order
i
true_variance_IC(type = parameters_grid[job, "type"],
positivity_parameter = parameters_grid[job, "positivity_parameter"],
alpha0 = parameters_grid[job, "alpha0"],
beta0 = parameters_grid[job, "beta0"],
beta1 = parameters_grid[job, "beta1"],
beta2 = parameters_grid[job, "beta2"],
d0 = alwaysTreated0,
delta0 = delta0s[i],
order = order)
parameters_grid
true_variance_IC("L0_exp", 4, 2, -3, 1.5, 1, alwaysTreated0, 1e-4, 1)
true_variance_IC("L0_exp", 4, 2, -3, 1.5, 1, alwaysTreated0, 1e-5, 1)
true_variance_IC("L0_exp", 4, 2, -3, 1.5, 1, alwaysTreated0, 1e-5, 1)
ws <- seq(from = -5, to =5, length = 100)
plot(ws, q_w(ws))
true_variance_IC("L0_exp", 4, 2, -3, 1.5, 1, alwaysTreated0, 1e-5, 1)
ws <- seq(from = -10, to =10, length = 100)
plot(ws, q_w(ws))
plot(ws, integrand(ws))
ws <- seq(from = -5, to = 50, length = 200)
plot(ws, integrand(ws))
true_variance_IC("L0_exp", 4, 2, -3, 1.5, 1, alwaysTreated0, 1e-6, 1)
ws <- seq(from = -5, to = 50, length = 200)
lines(ws, integrand(ws))
lines(ws, q_w(ws))
true_variance_IC("L0_exp", 4, -2, -3, 1.5, 1, alwaysTreated0, 1e-6, 1)
ws <- seq(from = -5, to = 50, length = 200)
lines(ws, integrand(ws))
lines(ws, Q0_dw_w(ws))
lines(ws, Q0_dw_w(w) - Q0_dw_w(w)^2))
lines(ws, Q0_dw_w(w) - Q0_dw_w(w)^2)
true_variance_IC("L0_exp", 4, -2, -3, 1.5, 1, alwaysTreated0, 1e-6, 1)
true_variance_IC("L0_exp", 4, -2, -3, 1.5, 1, alwaysTreated0, 1e-6, 1)
ws <- seq(from = -5, to = 50, length = 200)
lines(ws, Q0_dw_w(ws) - Q0_dw_w(ws)^2)
lines(ws, a_dot_inv_g_deltas(ws)^2)
lines(ws, q_w(ws) * a_dot_inv_g_deltas(ws)^2)
plot(ws, q_w(ws) * a_dot_inv_g_deltas(ws)^2)
alpha0
plot(ws, exp(-abs(ws)) / g0_dw_w(ws)^2)
plot(ws, q_w(ws) / g0_dw_w(ws)^2)
plot(ws, q_w(ws) / a_dot_inv_g_deltas(ws)^2)
delta0
delta0 <- 1e-8
result_compute_a_delta0 <- compute_a_delta0(delta0, order = order, n_points, diff_step, verbose=F)
a_delta0 <- result_compute_a_delta0$a_delta0
deltas <- result_compute_a_delta0$deltas
# Compute the truncation induced target parameters at truncation levels deltas
Psi_0_deltas <- sapply(deltas, Vectorize(function(delta) compute_Psi_0_delta(type,
positivity_parameter,
alpha0, beta0, beta1,
beta2, d0,
delta)))
# Define factors of the squared IC components
#g0_dw_w is g0(d(w)|w)
g0_dw_w <- Vectorize(function(w) d0(w) * expit(alpha0 * w) + (1 - d0(w)) * (1 - expit(alpha0 * w)))
# Q0_dw_w is \bar{Q}_0(d(w)| w)
Q0_dw_w <- function(w) expit(beta0 + beta1 * d0(w) + beta2 * w)
# q_w is q_w(w)
if(type == "L0_exp"){
q_w <- function(w) 1 / 2 * 1 / positivity_parameter * exp(-abs(w) / positivity_parameter)
}else{
q_w <- Vectorize(function(w) 1 / (2 * positivity_parameter) * (abs(w) <= positivity_parameter))
}
true_variance_IC("L0_exp", 4, -2, -3, 1.5, 1, alwaysTreated0, 1e-8, 1)
ws <- seq(from = -5, to = 5, length = 200)
lines(ws, integrand(ws))
lines(ws, q_w(ws) * a_dot_inv_g_deltas(ws)^2)
q_w(ws) * a_dot_inv_g_deltas(ws)^2
ws <- seq(from = -5, to = 50, length = 200)
lines(ws, q_w(ws) * a_dot_inv_g_deltas(ws)^2)
a_dot_inv_g_deltas(ws)^2
alpha0
1/g0_dw_w(ws)
max(deltas, g0_dw_w(w)) * deltas + (deltas <= g0_dw_w(w)) * g0_dw_w(w)
true_variance_IC("L0_exp", 4, -2, -3, 1.5, 1, alwaysTreated0, 1e-8, 1)
a <- 1:10
max(a, 5)
(a < 5) * 5 + (a >= 5) * a
true_variance_IC <- function(type, positivity_parameter, alpha0, beta0, beta1, beta2, d0,
delta0, order, n_points = 11, diff_step = NULL){
# Compute a_delta0 as defined in write-up
result_compute_a_delta0 <- compute_a_delta0(delta0, order = order, n_points, diff_step, verbose=F)
a_delta0 <- result_compute_a_delta0$a_delta0
deltas <- result_compute_a_delta0$deltas
# Compute the truncation induced target parameters at truncation levels deltas
Psi_0_deltas <- sapply(deltas, Vectorize(function(delta) compute_Psi_0_delta(type,
positivity_parameter,
alpha0, beta0, beta1,
beta2, d0,
delta)))
# Define factors of the squared IC components
#g0_dw_w is g0(d(w)|w)
g0_dw_w <- Vectorize(function(w) d0(w) * expit(alpha0 * w) + (1 - d0(w)) * (1 - expit(alpha0 * w)))
# Q0_dw_w is \bar{Q}_0(d(w)| w)
Q0_dw_w <- function(w) expit(beta0 + beta1 * d0(w) + beta2 * w)
# q_w is q_w(w)
if(type == "L0_exp"){
q_w <- function(w) 1 / 2 * 1 / positivity_parameter * exp(-abs(w) / positivity_parameter)
}else{
q_w <- Vectorize(function(w) 1 / (2 * positivity_parameter) * (abs(w) <= positivity_parameter))
}
# a_dot_inv_g_deltas is \sum_i a_i / g0_{delta_i}(d(w), w)
a_dot_inv_g_deltas <- Vectorize(function(w)
sum(a_delta0 * 1 / ((g0_dw_w(w) < deltas) * deltas + (deltas <= g0_dw_w(w)) * g0_dw_w(w))))
# Define integrand and return its integral
integrand <- Vectorize(function(w) q_w(w) * (Q0_dw_w(w) - Q0_dw_w(w)^2) * a_dot_inv_g_deltas(w)^2 +
q_w(w) * a_dot_inv_g_deltas(w)^2 * g0_dw_w(w)^2 * Q0_dw_w(w)^2)
var_IC <- integrate(integrand, lower = -10 * positivity_parameter, upper = 10 * positivity_parameter)$value -
sum(a_delta0 * Psi_0_deltas)^2
if(var_IC < 0){
return(Inf)
}else{
return(var_IC)
}
}
true_variance_IC("L0_exp", 4, -2, -3, 1.5, 1, alwaysTreated0, 1e-8, 0)
true_variance_IC("L0_exp", 4, -2, -3, 1.5, 1, alwaysTreated0, 1e-6, 0)
true_variance_IC("L0_exp", 4, -2, -3, 1.5, 1, alwaysTreated0, 1e-3, 0)
true_variance_IC("L0_exp", 4, 2, -3, 1.5, 1, alwaysTreated0, 1e-3, 0)
true_variance_IC("L0_exp", 4, 2, -3, 1.5, 1, alwaysTreated0, 1e-6, 0)
true_variance_IC("L0_unif", 4, 2, -3, 1.5, 1, alwaysTreated0, 1e-6, 0)
true_variance_IC("L0_unif", 4, 2, -3, 1.5, 1, alwaysTreated0, 0, 0)
true_variance_IC("L0_exp", 4, 2, -3, 1.5, 1, alwaysTreated0, 0, 0)
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/process_results_extrapolations.R')
