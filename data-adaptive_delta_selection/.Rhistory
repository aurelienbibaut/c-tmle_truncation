log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b)) - 0.5 * log(ns))),
xlab = expression(log(n)),
ylab = expression(frac(log(widehat(Delta * R[n](delta[n]^"*"))), sigma[0](delta[n]^"*")*{delta[n]^"*"}^{-1})))
plot(log(ns), log(LHS_eta) - 0.5 * log(ns), type = "l", col = "green", ylim = c(min(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b) - 0.5 * log(ns))),
max(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b)) - 0.5 * log(ns))),
xlab = expression(log(n)),
ylab = expression({frac(log(widehat(Delta * R[n](delta[n]^"*"))), sigma[0](delta[n]^"*")*{delta[n]^"*"}^{-1})}^eta))
plot(log(ns), log(LHS_eta) - 0.5 * log(ns), type = "l", col = "green", ylim = c(min(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b) - 0.5 * log(ns))),
max(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b)) - 0.5 * log(ns))),
xlab = expression(log(n)),
ylab = expression(log(frac(widehat(Delta * R[n](delta[n]^"*")), sigma[0](delta[n]^"*")*{delta[n]^"*"}^{-1}))^eta))
plot(log(ns), log(LHS_eta) - 0.5 * log(ns), type = "l", col = "green", ylim = c(min(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b) - 0.5 * log(ns))),
max(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b)) - 0.5 * log(ns))),
xlab = expression(log(n)),
ylab = expression(log(eta * frac(widehat(Delta * R[n](delta[n]^"*")), sigma[0](delta[n]^"*")*{delta[n]^"*"}^{-1})) - 1/2*log(n)))
plot(log(ns), log(LHS_eta) - 0.5 * log(ns), type = "l", col = "green", ylim = c(min(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b) - 0.5 * log(ns))),
max(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b)) - 0.5 * log(ns))),
xlab = expression(log(n)),
ylab = expression(eta * log(frac(widehat(Delta * R[n](delta[n]^"*")), sigma[0](delta[n]^"*")*{delta[n]^"*"}^{-1})) - 1/2*log(n)))
plot(log(ns), log(LHS_eta) - 0.5 * log(ns), type = "l", col = "green", ylim = c(min(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b) - 0.5 * log(ns))),
max(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b)) - 0.5 * log(ns))),
xlab = expression(log(n)),
ylab = expression(eta * log(frac(widehat(Delta * R[n](delta[n]^"*")), sigma[0](delta[n]^"*")*{delta[n]^"*"}^{-1})) - frac(1,2)*log(n)))
plot(log(ns), log(LHS_eta) - 0.5 * log(ns), type = "l", col = "green", ylim = c(min(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b) - 0.5 * log(ns))),
max(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b)) - 0.5 * log(ns))),
xlab = expression(log(n)),
ylab = expression(eta * log(frac(widehat(Delta * R[n](tilde(delta)[n])), sigma[0](delta[n]^"*")*{delta[n]^"*"}^{-1})) - frac(1,2)*log(n)))
plot(log(ns), log(LHS_eta) - 0.5 * log(ns), type = "l", col = "green", ylim = c(min(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b) - 0.5 * log(ns))),
max(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b)) - 0.5 * log(ns))),
xlab = expression(log(n)),
main = expression(eta * log(frac(widehat(Delta * R[n](tilde(delta)[n])), sigma[0](tilde(delta)[n])*{tilde(delta)[n]}^{-1})) - frac(1,2)*log(n)))
plot(log(ns), log(LHS_eta) - 0.5 * log(ns), type = "l", col = "green", ylim = c(min(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b) - 0.5 * log(ns))),
max(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b)) - 0.5 * log(ns))),
xlab = expression(log(n)),
ylab = expression(g(eta)),
main = expression(g * hat(==) * eta * log(frac(widehat(Delta * R[n](tilde(delta)[n])), sigma[0](tilde(delta)[n])*{tilde(delta)[n]}^{-1})) - frac(1,2)*log(n)))
plot(log(ns), log(LHS_eta) - 0.5 * log(ns), type = "l", col = "green", ylim = c(min(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b) - 0.5 * log(ns))),
max(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b)) - 0.5 * log(ns))),
xlab = expression(log(n)),
ylab = expression(g(eta)),
main = expression(g * hat("=") * eta * log(frac(widehat(Delta * R[n](tilde(delta)[n])), sigma[0](tilde(delta)[n])*{tilde(delta)[n]}^{-1})) - frac(1,2)*log(n)))
plot(log(ns), log(LHS_eta) - 0.5 * log(ns), type = "l", col = "green", ylim = c(min(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b) - 0.5 * log(ns))),
max(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b)) - 0.5 * log(ns))),
xlab = expression(log(n)),
ylab = expression(g(delta[n]^"a")),
main = expression(g(tilde(delta)[n]) * hat("=") * eta * log(frac(widehat(Delta * R[n](tilde(delta)[n])), sigma[0](tilde(delta)[n])*{tilde(delta)[n]}^{-1})) - frac(1,2)*log(n)))
plot(log(ns), log(LHS_eta) - 0.5 * log(ns), type = "l", col = "green", ylim = c(min(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b) - 0.5 * log(ns))),
max(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b)) - 0.5 * log(ns))),
xlab = expression(log(n)),
ylab = expression(g(delta[n]^"a"), g(delta[n]^"*")),
main = expression(g(tilde(delta)[n]) * hat("=") * eta * log(frac(widehat(Delta * R[n](tilde(delta)[n])), sigma[0](tilde(delta)[n])*{tilde(delta)[n]}^{-1})) - frac(1,2)*log(n)))
plot(log(ns), log(LHS_eta) - 0.5 * log(ns), type = "l", col = "green", ylim = c(min(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b) - 0.5 * log(ns))),
max(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b)) - 0.5 * log(ns))),
xlab = expression(log(n)),
ylab = expression(g(delta[n]^"a"), g(delta[n]^"*")),
main = expression(g(tilde(delta)[n]) * hat("=") * eta * log(frac(widehat(Delta * R[n](tilde(delta)[n])), sigma[0](tilde(delta)[n])*{tilde(delta)[n]}^{-1})) - frac(1,2)*log(n)))
plot(log(ns), log(LHS_eta) - 0.5 * log(ns), type = "l", col = "green", ylim = c(min(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b) - 0.5 * log(ns))),
max(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b)) - 0.5 * log(ns))),
xlab = expression(log(n)),
ylab = expression(g(delta[n]^"a") *", " * g(delta[n]^"*")),
main = expression(g(tilde(delta)[n]) * hat("=") * eta * log(frac(widehat(Delta * R[n](tilde(delta)[n])), sigma[0](tilde(delta)[n])*{tilde(delta)[n]}^{-1})) - frac(1,2)*log(n)))
plot(log(ns), log(LHS_eta) - 0.5 * log(ns), type = "l", col = "green", ylim = c(min(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b) - 0.5 * log(ns))),
max(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b)) - 0.5 * log(ns))),
xlab = expression(log(n)),
ylab = expression(g(delta[n]^"a") *", " * g(delta[n]^"*") *", " * g(delta[n]^"b")),
main = expression(g(tilde(delta)[n]) * hat("=") * eta * log(frac(widehat(Delta * R[n](tilde(delta)[n])), sigma[0](tilde(delta)[n])*{tilde(delta)[n]}^{-1})) - frac(1,2)*log(n)))
lines(log(ns), log(LHS_eta_a) - 0.5 * log(ns), col = "blue")
lines(log(ns), log(LHS_eta_b) - 0.5 * log(ns), col = "red")
plot(log(ns), log(delta_n_star))
abline(0, -1 / (2 * eta * (gamma + 1 - beta)))
plot(log(ns), log(LHS_eta), type = "l", col = "green", ylim = c(min(c(log(LHS_eta),
log(LHS_eta_a),
log(LHS_eta_b))),
max(c(log(LHS_eta),
log(LHS_eta_a),
log(LHS_eta_b)))))
abline(0, 0)
lines(log(ns), log(LHS_eta_a), col = "blue")
lines(log(ns), log(LHS_eta_b), col = "red")
plot(log(ns), log(LHS_eta) - 0.5 * log(ns), type = "l", col = "green", ylim = c(min(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b) - 0.5 * log(ns))),
max(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b)) - 0.5 * log(ns))),
xlab = expression(log(n)),
ylab = expression(g(delta[n]^"a") *", " * g(delta[n]^"*") *", " * g(delta[n]^"b")),
main = expression(g(tilde(delta)[n]) * hat("=") * eta * log(frac(widehat(Delta * R[n](tilde(delta)[n])), sigma[0](tilde(delta)[n])*{tilde(delta)[n]}^{-1})) - frac(1,2)*log(n)))
lines(log(ns), log(LHS_eta_a) - 0.5 * log(ns), col = "blue")
lines(log(ns), log(LHS_eta_b) - 0.5 * log(ns), col = "red")
abline(0, -0.5)
plot(log(ns), log(LHS_eta) - 0.5 * log(ns), type = "l", col = "green", ylim = c(min(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b) - 0.5 * log(ns))),
max(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b)) - 0.5 * log(ns))),
xlab = expression(log(n)),
ylab = '',
main = expression(g(tilde(delta)[n]) * hat("=") * eta * log(frac(widehat(Delta * R[n](tilde(delta)[n])), sigma[0](tilde(delta)[n])*{tilde(delta)[n]}^{-1})) - frac(1,2)*log(n)))
legend('bottomleft', c("a", "b", "c"))
main = expression(g(tilde(delta)[n]) * hat("=") * eta * log(frac(widehat(Delta * R[n](tilde(delta)[n])), sigma[0](tilde(delta)[n])*{tilde(delta)[n]}^{-1})) - frac(1,2)*log(n)))
legend('bottomleft', c("a", "b", "c"), col = c("blue", "green", "red"))
plot(log(ns), log(LHS_eta) - 0.5 * log(ns), type = "l", col = "green", ylim = c(min(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b) - 0.5 * log(ns))),
max(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b)) - 0.5 * log(ns))),
xlab = expression(log(n)),
ylab = '',
main = expression(g(tilde(delta)[n]) * hat("=") * eta * log(frac(widehat(Delta * R[n](tilde(delta)[n])), sigma[0](tilde(delta)[n])*{tilde(delta)[n]}^{-1})) - frac(1,2)*log(n)))
legend('bottomleft', c("a", "b", "c"), col = c("blue", "green", "red"))
legend('bottomleft', c("a", "b", "c"), col = c("blue", "green", "red"), lty = c(1,1,1))
plot(log(ns), log(LHS_eta) - 0.5 * log(ns), type = "l", col = "green", ylim = c(min(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b) - 0.5 * log(ns))),
max(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b)) - 0.5 * log(ns))),
xlab = expression(log(n)),
ylab = '',
main = expression(g(tilde(delta)[n]) * hat("=") * eta * log(frac(widehat(Delta * R[n](tilde(delta)[n])), sigma[0](tilde(delta)[n])*{tilde(delta)[n]}^{-1})) - frac(1,2)*log(n)))
lines(log(ns), log(LHS_eta_a) - 0.5 * log(ns), col = "blue")
lines(log(ns), log(LHS_eta_b) - 0.5 * log(ns), col = "red")
abline(0, -0.5)
legend('bottomleft', c("a", "b", "c"), col = c("blue", "green", "red"), lty = c(1,1,1))
legend('bottomleft', c(expression(g(delta[n]^"*" * n^{-epsilon})),
expression(g(delta[n]^"*")),
expression(g(delta[n]^"*" * n^epsilon))), col = c("blue", "green", "red"), lty = c(1,1,1))
legend('bottomleft', c(expression(g(delta[n]^"*" * n^{-epsilon})),
expression(g(delta[n]^"*")),
expression(g(delta[n]^"*" * n^epsilon)),
expression(frac(1, gamma + 1 -beta) * log(n))),
col = c("blue", "green", "red", "black"), lty = c(1,1,1, 1))
plot(log(ns), log(LHS_eta) - 0.5 * log(ns), type = "l", col = "green", ylim = c(min(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b) - 0.5 * log(ns))),
max(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b)) - 0.5 * log(ns))),
xlab = expression(log(n)),
ylab = '',
main = expression(g(tilde(delta)[n]) * hat("=") * eta * log(frac(widehat(Delta * R[n](tilde(delta)[n])), sigma[0](tilde(delta)[n])*{tilde(delta)[n]}^{-1})) - frac(1,2)*log(n)))
lines(log(ns), log(LHS_eta_a) - 0.5 * log(ns), col = "blue")
lines(log(ns), log(LHS_eta_b) - 0.5 * log(ns), col = "red")
abline(0, -0.5)
legend('bottomleft', c(expression(g(delta[n]^"*" * n^{-epsilon})),
expression(g(delta[n]^"*")),
expression(g(delta[n]^"*" * n^epsilon)),
expression(frac(1, gamma + 1 -beta) * log(n))),
col = c("blue", "green", "red", "black"), lty = c(1,1,1, 1))
abline(0, -0.5)
legend('bottomleft', c(expression(g(delta[n]^"*" * n^{-epsilon})),
expression(g(delta[n]^"*")),
expression(g(delta[n]^"*" * n^epsilon)),
expression(0.5 * log(n))),
col = c("blue", "green", "red", "black"), lty = c(1,1,1, 1))
plot(log(ns), log(LHS_eta) - 0.5 * log(ns), type = "l", col = "green", ylim = c(min(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b) - 0.5 * log(ns))),
max(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b)) - 0.5 * log(ns))),
xlab = expression(log(n)),
ylab = '',
main = expression(g(tilde(delta)[n]) * hat("=") * eta * log(frac(widehat(Delta * R[n](tilde(delta)[n])), sigma[0](tilde(delta)[n])*{tilde(delta)[n]}^{-1})) - frac(1,2)*log(n)))
lines(log(ns), log(LHS_eta_a) - 0.5 * log(ns), col = "blue")
lines(log(ns), log(LHS_eta_b) - 0.5 * log(ns), col = "red")
abline(0, -0.5)
legend('bottomleft', c(expression(g(delta[n]^"*" * n^{-epsilon})),
expression(g(delta[n]^"*")),
expression(g(delta[n]^"*" * n^epsilon)),
expression(0.5 * log(n))),
col = c("blue", "green", "red", "black"), lty = c(1,1,1, 1))
text(expression(eta = 2))
text('topright', expression(eta = 2))
text('topright', expression(eta = 2))
text(1, 1, expression(eta = 2))
text(1, 1, expression(eta = 2))
text(1, 1, "eta = 2")
text(4, 7, "eta = 2")
plot(log(ns), log(LHS_eta) - 0.5 * log(ns), type = "l", col = "green", ylim = c(min(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b) - 0.5 * log(ns))),
max(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b)) - 0.5 * log(ns))),
xlab = expression(log(n)),
ylab = '',
main = expression(g(tilde(delta)[n]) * hat("=") * eta * log(frac(widehat(Delta * R[n](tilde(delta)[n])), sigma[0](tilde(delta)[n])*{tilde(delta)[n]}^{-1}))))
plot(log(ns), log(LHS_eta) - 0.5 * log(ns), type = "l", col = "green", ylim = c(min(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b) - 0.5 * log(ns))),
max(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b)) - 0.5 * log(ns))),
xlab = expression(log(n)),
ylab = '',
main = expression(g(tilde(delta)[n]) * hat("=") * eta * log* bgroup("(",
frac(widehat(Delta * R[n](tilde(delta)[n])), sigma[0](tilde(delta)[n])*{tilde(delta)[n]}^{-1}),
")" )))
plot(log(ns), log(LHS_eta) - 0.5 * log(ns), type = "l", col = "green", ylim = c(min(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b) - 0.5 * log(ns))),
max(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b)) - 0.5 * log(ns))),
xlab = expression(log(n)),
ylab = '',
main = expression(g(tilde(delta)[n]) * hat("=") * eta * log* group("(",
frac(widehat(Delta * R[n](tilde(delta)[n])), sigma[0](tilde(delta)[n])*{tilde(delta)[n]}^{-1}),
")" )))
")" )))
lines(log(ns), log(LHS_eta_a) - 0.5 * log(ns), col = "blue")
lines(log(ns), log(LHS_eta_b) - 0.5 * log(ns), col = "red")
abline(0, -0.5)
legend('bottomleft', c(expression(g(delta[n]^"*" * n^{-epsilon})),
expression(g(delta[n]^"*")),
expression(g(delta[n]^"*" * n^epsilon)),
expression(-0.5 * log(n))),
col = c("blue", "green", "red", "black"), lty = c(1,1,1, 1))
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
plot(log(ns), log(delta_n_star),
xlab = expression(log(n)),
ylab = expression(delta[n]^"*"))
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
mtext("Title for Two Plots", outer = TRUE, cex = 1.5)
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
mtext(expression(eta == 2), side = 3, line = -25, outer = TRUE, cex = 2)
mtext(expression(eta == 1), side = 3, line = -25, outer = TRUE, cex = 2)
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
mtext(expression(eta == 1), side = 3, line = -25, outer = TRUE, cex = 2)
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
mtext(expression(eta == 1), side = 3, line = -25, outer = TRUE, cex = 2)
mtext(expression(eta == 4), side = 3, line = -25, outer = TRUE, cex = 2)
2*(gamma + 1 - beta)
2 - 1.75/2
0 - 1.75/2
1 - 1.75/2
(1 - 1.75/2 + 1 - (2 - 1
)
)
(1 - 1.75/2 + 1 - (2 - 1.75))
2*(1 - 1.75/2 + 1 - (2 - 1.75))
2*(1 - 1.75/2 + 1 - (2 - 1.75))
gamma
beta <- 0.25
gamma <- 0.125
gamma + 1 - beta
2*(gamma + 1 - beta)
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
uniroot(function(x) x^2 + 1, interval = c(-1, 1))
try(uniroot(function(x) x^2 + 1, interval = c(-1, 1)))
uniroot(function(x) x^2 + 1, interval = c(-1, 1))
uniroot(function(x) x^2 + 1, interval = c(-1, 1), extendInd = "ues")
q
q
uniroot(function(x) x^2 + 1, interval = c(-1, 1), extendInd = "yes")
uniroot(function(x) x^2 + 1, interval = c(-1, 1), extendInt = "yes")
uniroot(function(x) x^2 + 1, interval = c(-1, 1), extendInt = "yes")
a <- try(uniroot(function(x) x^2 + 1, interval = c(-1, 1), extendInt = "yes")$root)
a
class(Aa)
class(a)
a <- 1
class(a)
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
etas_n
delta_n_star
while(class(current_solver_result) == "try-error"){
current_solver_result <- try(uniroot(Vectorize(function(delta) (finite_diff_estimator(delta, n) / delta^(-gamma - 1))^eta - n^(-0.5)),
interval = c(delta_n_a, delta_n_b),
extendInt = "yes")$root)
eta_n <- eta_n + 0.1
}
class(current_solver_result)
class(current_solver_result) <- "try-error"
while(class(current_solver_result) == "try-error"){
current_solver_result <- try(uniroot(Vectorize(function(delta) (finite_diff_estimator(delta, n) / delta^(-gamma - 1))^eta - n^(-0.5)),
interval = c(delta_n_a, delta_n_b),
extendInt = "yes")$root)
eta_n <- eta_n + 0.1
}
class(current_solver_result)
eta_n
eta_n <- 1
class(current_solver_result) <- "try-error"
while(class(current_solver_result) == "try-error"){
current_solver_result <- try(uniroot(Vectorize(function(delta) (finite_diff_estimator(delta, n) / delta^(-gamma - 1))^eta - n^(-0.5)),
interval = c(delta_n_a, delta_n_b),
extendInt = "yes")$root)
eta_n <- eta_n + 1e-2
}
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
etas_n
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
etas_n
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
etas_n
eta
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
etas_n
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
etas
etas_n
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
etas_n
plot(log(ns), etas_n)
source('~/aurelien.bibaut@gmail.com/Data_PC/PhD Berkeley/TMLE_truncation/Taylor expansion based estimator/c-tmle_truncation/data-adaptive_delta_selection/check_asymptotics_data_adaptive_delta.R')
par(mfrow = c(2, 2), mar = c(4.1,4.5,4.9,2.1))
mtext(expression(eta == 4), side = 3, line = -25, outer = TRUE, cex = 2)
plot(log(ns), log(delta_n))
abline(log(delta_n)[1] + 1/(2*(gamma + 1 - beta)) * log(10^2), -1/(2*(gamma + 1 - beta)))
plot(log(ns), log(bias_prime_delta_n_star), main = "log b'(delta_n^+)")
plot(log(ns), log(sigma_prime_delta_n_star), main = "log n^-0.5 * sigma0(delta_n^+)")
plot(log(ns), log(sigma_R_prime_delta_n_plus), main = "sigma_{R'(delta_n^+)}")
plot(log(ns), log(LHS_eta), type = "l", col = "green", ylim = c(min(c(log(LHS_eta),
log(LHS_eta_a),
log(LHS_eta_b))),
max(c(log(LHS_eta),
log(LHS_eta_a),
log(LHS_eta_b)))),
xlab = expression(log(n)),
ylab = '',
main = expression(g(tilde(delta)[n])* hat(" = ") * eta * log* bgroup("(",
frac(widehat(Delta * R[n](tilde(delta)[n])), sigma[0](tilde(delta)[n])*{tilde(delta)[n]}^{-1}),
")") + 1/2 * log(n)))
abline(0, 0)
lines(log(ns), log(LHS_eta_a), col = "blue")
lines(log(ns), log(LHS_eta_b), col = "red")
legend('bottomleft', c(expression(g(delta[n]^"*" * n^{-epsilon})),
expression(g(delta[n]^"*")),
expression(g(delta[n]^"*" * n^epsilon)),
expression(0)),
col = c("blue", "green", "red", "black"), lty = c(1,1,1, 1))
plot(log(ns), log(LHS_eta) - 0.5 * log(ns), type = "l", col = "green", ylim = c(min(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b) - 0.5 * log(ns))),
max(c(log(LHS_eta) - 0.5 * log(ns),
log(LHS_eta_a) - 0.5 * log(ns),
log(LHS_eta_b)) - 0.5 * log(ns))),
xlab = expression(log(n)),
ylab = '',
main = expression(LHS(tilde(delta)[n]) * hat(" = ") * eta * log* bgroup("(",
frac(widehat(Delta * R[n](tilde(delta)[n])), sigma[0](tilde(delta)[n])*{tilde(delta)[n]}^{-1}),
")" )))
lines(log(ns), log(LHS_eta_a) - 0.5 * log(ns), col = "blue")
lines(log(ns), log(LHS_eta_b) - 0.5 * log(ns), col = "red")
abline(0, -0.5)
legend('bottomleft', c(expression(LHS(delta[n]^"*" * n^{-epsilon})),
expression(LHS(delta[n]^"*")),
expression(LHS(delta[n]^"*" * n^epsilon)),
expression(-0.5 * log(n))),
col = c("blue", "green", "red", "black"), lty = c(1,1,1, 1))
plot(log(ns), etas_n * log(delta_n_star),
xlab = expression(log(n)),
ylab = expression(log(delta[n]^"*")))
abline(0, -1 / (2 *  (gamma + 1 - beta)))
legend('bottomleft', c(expression(log(delta[n]^"*")),
expression(frac(-log(n), 2 * (gamma + 1 - beta)))), lty = c(NA,1), pch = (c(1, NA)))
plot(log(ns), etas_n)
